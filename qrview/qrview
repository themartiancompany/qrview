#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0-or-later

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
source \
  "${_lib}/libcrash-bash/crash-bash"

# shellcheck disable=SC2034
_global_variables() {
  view_date=""
  viewer_app=""
  target_string=""
  work_dir=""
  color=""
  quiet=""
}

_requirements() {
  _check_cmd \
    'qrencode'
  _os="$( \
    uname \
      -o)"
  if [[ "${_os}" == "GNU/Linux" ]]; then
  _check_cmd \
    'setfont' \
    'kbd'
  _check_cmd \
    'showconsolefont' \
    'kbd'
  fi
}

_get_conf_dir_path() {
  local \
    _dir
  _dir="${HOME}/.config/$( \
    _get \
      "app" \
      "name")"
  echo \
    "${_dir}"
}

_height_get() {
  local \
    _showconsolefont_opts=()
  showconsolefont \
    "${_showconsolefont_opts}" | \
    awk \
      -F \
        "x" \
      '{print $3}'
}

_viewer_auto_detect() {
  local \
    _viewer \
    _os
  _os="$( \
    uname \
      -o)"
  _viewer="picture-viewer"
  if [ ! -n 'DISPLAY' ]; then
    _viewer="xdg-open"
  fi
  if [[ "${_os}" == "Android" ]]; then
    _viewer="termux-open"
  fi
  echo \
    "${_viewer}"
}

_encode() {
  local \
    _string="${1}" \
    _view="${2}" \
    _qrencode_opts=()
  _qrencode_opts+=(
    -o 
      "${_view}"
    -d
      512
    -s
      12
  )
  qrencode \
    "${_qrencode_opts[@]}" \
    "${_string}"
}

_font_human() {
  local \
    _share \
    _font \
    _fonts
  _share="$( \
    _get_usr)/share"
  _fonts="${_share}/kbd/consolefonts"
  _font="${_fonts}/iso02-12x${_height}.psfu.gz"
  echo \
    "${_font}"
}

_view_human() {
  local \
    _height=22 \
    _setfont \
    _setfont_opts=()
  _setfont_opts+=(
    -h"${_height}"
  )
  _setfont="$( \
    command \
      -v \
      "setfont")"
  "${_setfont}" \
    "${_setfont_opts[@]}"
    "$(_font_human)"

}

_qrview() {
  local \
    _string="${1}" \
    _viewer="${2}" \
    _work_dir="${3}" \
    _oldpwd \
    _os \
    _view
  _view="${_work_dir}/view.png"
  _oldpwd="$( \
    pwd)"
  cd \
    "${_work_dir}"
  if [[ -n "DISPLAY" ]]; then
    _os="$( \
      uname \
        -o)"
    if [[ "${_os}" == "GNU/Linux" ]]; then
      _oldheight="$( \
        _height_get)"
      _view_human
      # _height=22
      # _setfont="$( \
      #   command \
      #     -v \
      #     "setfont")"
      # _share="$( \
      #   _get_usr)/share"
      # _fonts="${_share}/kbd/consolefonts"
      # _font="${_fonts}/iso02-12x${_height}.psfu.gz"
      # "${_setfont}" \
      #   -h22 \
      #     "${_font}"
    fi
  fi
  _encode \
    "${_string}" \
    "${_view}"
  "${_viewer}" \
    "${_view}"
  cd \
    "${_oldpwd}"
  sleep \
    10
  rm \
    -rf \
    "${_work_dir}"
}

_set_overrides() {
  _set_override \
    "view" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "viewer" \
    "app" \
    "$(_viewer_auto_detect)"
  _set_override \
    "work" \
    "dir" \
    "$(mktemp \
         -d)"
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _exit="${1}" \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true
Share a string using a QR code.

Usage:
  $(_get "app" "name")
    [options]
    <target_string>

  options:
     -a <viewer_app>      Viewer application
                          ('picture viewer', 'xdg-open',
                           'termux-open')
                          Default: '$(_get "viewer" "app")'
     -w <work_dir>        Work directory
                          Default: '$(_get "work" "dir")'


     -h                   This message.
     -c                   Enable color output
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${_exit}"
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "                View date:   $(_get "view" "date")"
  _msg_info "               Viewer app:   $(_get "viewer" "app")"
  _msg_info "                 Work dir:   $(_get "work" "dir")"
  _msg_info "            Target string:   $(_get "target" "string")"
}

_globals
_global_variables
_requirements
# shellcheck disable=SC2034
while \
  getopts \
    'a:w:cvh?' \
    arg; do
  case \
    "${arg}" in
    a) override_viewer_app="${OPTARG}";;
    w) override_work_dir="${OPTARG}";;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
echo \
  "$@"
if (( 0 < "$#" )); then
  _set \
    "target" \
    "string" \
    "${1}"
fi
if [[ "$(_get "target" 'string')" ==  "" ]]; then
  _msg_error \
    "no string given" \
    0
  _set_overrides
  _usage \
    1
fi
_set_overrides
_config_user_init \
  "$( \
    _get \
      "app" \
      "name")"
_show_config
app_opts=(
  "${viewer_app}"
  "${worka_dir}"
  "${target_string}"
)
_qrview \
  "${app_opts[@]}"

# vim:set sw=2 sts=-1 et:
